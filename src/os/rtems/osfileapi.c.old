/*
 * File   : osfileapi.c
 *
 * Author : Nicholas Yanchik
 * Author : Aitor Viana / ESA-ESTEC
 * Purpose: 
 *         This file  contains some of the OS APIs abstraction layer 
 *         implementation for POSIX, specifically for Linux / Mac OS X.
 *
 * Changelog:
 * 28/01/08 10:43:09
 * The rtems_bdbuf_config and rtems_ramdisk_config structures has been added to
 * deal with an external placed filesystem. 
 *
 */
/*
 * Author : Ezra Yeheskeli
 * Purpose: 
 *         This file  contains some of the OS APIs abstraction layer 
 *         implementation for POSIX, specifically for Linux / Mac OS X.
 *
 */

/*-----------------------------------------------------------------------------
 *  Last modification: 13/08/08 10:53:32
 *-----------------------------------------------------------------------------*/

/****************************************************************************************
  INCLUDE FILES
 ****************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <rtems.h>
#include <dirent.h>
#include <sys/stat.h>

#include <osal/osapi.h>

/****************************************************************************************
  DEFINES
 ****************************************************************************************/

# define ERROR -1
#define OS_MAX_API_NAME    (100)

/****************************************************************************************
  GLOBAL DATA
 ****************************************************************************************/

/** 
 * File descriptors table. This structure stores all the information related to
 * the possible system files. Only OS_MAX_NUM_OPEN_FILES files may be opened at
 * the same time.
 */
LOCAL OS_FDTableEntry OS_FDTable[OS_MAX_NUM_OPEN_FILES];
LOCAL Result_T OS_check_name_length(const char *path);

extern int32_t OS_NameChange(char* name);

/** Mutual exclusion access to the file system resources    */
LOCAL rtems_id OS_FDTableMutex;

#define RTEMS_LOCK(id)    rtems_semaphore_obtain(id, RTEMS_WAIT, RTEMS_NO_TIMEOUT)
#define RTEMS_UNLOCK(id)  rtems_semaphore_release(id)

/****************************************************************************************
  INITIALIZATION FUNCTION
 ****************************************************************************************/

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  OS_FS_Init
 *  Description:  This function initializes the file system in the guest
 *  operating system.
 *
 *  Return:
 *      - OS_FS_NOT_INIT    If some problems during initialization occurred
 *      - OS_SUCCESS     On success
 * =====================================================================================
 */
Result_T OS_FS_Init(void)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int i;
    rtems_status_code status;
    rtems_name r_name;

    /* Initialize the file system constructs */
    for (i =0; i < OS_MAX_NUM_OPEN_FILES; i++)
    {
        OS_FDTable[i].OSfd =       -1;
        strcpy(OS_FDTable[i].Path, "\0");
        OS_FDTable[i].User =       0;
        OS_FDTable[i].IsValid =    FALSE;
    }

    /*  Initialize the mutual exclusion means to the file resources */
    r_name = rtems_build_name('F','S','M','T');
    status = rtems_semaphore_create( r_name, 1, 0,
            RTEMS_BINARY_SEMAPHORE,
            &OS_FDTableMutex);

    if( status != RTEMS_SUCCESSFUL )
        return OS_FS_NOT_INIT;

    return OS_SUCCESS;
#else
    return OS_NOT_SUPPORTED;
#endif
}
/****************************************************************************************
  Filesys API
 ****************************************************************************************/

/*--------------------------------------------------------------------------------------
Name: OS_creat

Purpose: creates a file specified by const char *path, with read/write 
permissions by access. The file is also automatically opened by the
create call.

Returns: OS_FS_INVALID_POINTER if path is NULL
OS_FS_PATH_TOO_LONG if path exceeds the maximum number of chars
OS_ERR_FS_PATH_INVALID if path cannot be parsed
OS_ERR_FS_NAME_TOO_LONG if the name of the file is too long
OS_ERROR if permissions are unknown or OS call fails
OS_ERR_FS_NO_FREE_FS if there are no free file descripors left
OS_SUCCESS if success

---------------------------------------------------------------------------------------*/

Result_T OS_creat  (const char *path, int32_t  access)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;
    char local_path[OS_MAX_PATH_LEN];
    int perm;
    mode_t mode;
    uint32_t PossibleFD;

    if (path == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(path) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(local_path, path);
/*     if(OS_NameChange(local_path) != OS_SUCCESS)
 *     {
 *         return OS_ERR_FS_PATH_INVALID;
 *     }
 */

    /* check if the name of the file is too long */
    if (OS_check_name_length(local_path) != OS_SUCCESS)
        return OS_ERR_FS_NAME_TOO_LONG;

    RTEMS_LOCK(OS_FDTableMutex);

    for ( PossibleFD = 0; PossibleFD < OS_MAX_NUM_OPEN_FILES; PossibleFD++)
    {
        if( OS_FDTable[PossibleFD].IsValid == FALSE)
        {
            break;
        }
    }

    if (PossibleFD >= OS_MAX_NUM_OPEN_FILES)
    {
        RTEMS_UNLOCK(OS_FDTableMutex);

        return OS_ERR_FS_NO_FREE_FDS;
    }

    /* Mark the table entry as valid so no other 
     * task can take that ID */
    OS_FDTable[PossibleFD].IsValid = TRUE;

    RTEMS_UNLOCK(OS_FDTableMutex);

    switch(access)
    {
        case OS_READ_ONLY:
            perm = O_RDONLY;
            break;
        case OS_WRITE_ONLY:
            perm = O_WRONLY;
            break;
        case OS_READ_WRITE:
            perm = O_RDWR;
            break;
        default:
            return OS_ERROR;
    }

    mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;

    status =  open(local_path, perm | O_CREAT, mode);

    RTEMS_LOCK(OS_FDTableMutex);

    if (status != ERROR)
    {
        /* fill in the table before returning */
        OS_FDTable[PossibleFD].OSfd =       status;
        strncpy(OS_FDTable[PossibleFD].Path, path, OS_MAX_API_NAME);
        OS_FDTable[PossibleFD].User =       OS_TaskGetId();
        RTEMS_UNLOCK(OS_FDTableMutex);

        return PossibleFD;
    }
    else
    {
        /* Operation failed, so reset to false */
        OS_FDTable[PossibleFD].IsValid = FALSE;
        RTEMS_UNLOCK(OS_FDTableMutex);
        return OS_ERROR;
    }
#else
    UNUSED(path);
    UNUSED(access);
    return OS_NOT_SUPPORTED;
#endif

} /* end OS_creat */

/*--------------------------------------------------------------------------------------
Name: OS_open

Purpose: Opens a file. access parameters are OS_READ_ONLY,OS_WRITE_ONLY, or 
OS_READ_WRITE

Returns: OS_FS_INVALID_POINTER if path is NULL
OS_FS_PATH_TOO_LONG if path exceeds the maximum number of chars
OS_ERR_FS_PATH_INVALID if path cannot be parsed
OS_ERR_FS_NAME_TOO_LONG if the name of the file is too long
OS_ERROR if permissions are unknown or OS call fails
OS_ERR_FS_NO_FREE_FDS if there are no free file descriptors left
a file descriptor if success
---------------------------------------------------------------------------------------*/

Result_T OS_open   (const char *path,  int32_t access,  uint32_t  mode)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;
    char local_path[OS_MAX_PATH_LEN];
    int perm;
    uint32_t PossibleFD;
    UNUSED(mode);


    if(path == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(path) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(local_path, path);
/*     if(OS_NameChange(local_path) != OS_SUCCESS)
 *     {
 *         return OS_ERR_FS_PATH_INVALID;
 *     }
 */



    /* check if the name of the file is too long */
    if (OS_check_name_length(local_path) == OS_ERROR)
        return OS_ERR_FS_NAME_TOO_LONG;

    RTEMS_LOCK(OS_FDTableMutex);

    for ( PossibleFD = 0; PossibleFD < OS_MAX_NUM_OPEN_FILES; PossibleFD++)
    {
        if( OS_FDTable[PossibleFD].IsValid == FALSE)
        {
            break;
        }
    }


    if (PossibleFD >= OS_MAX_NUM_OPEN_FILES)
    {
        RTEMS_UNLOCK(OS_FDTableMutex);

        return OS_ERR_FS_NO_FREE_FDS;
    }

    /* Mark the table entry as valid so no other 
     * task can take that ID */
    OS_FDTable[PossibleFD].IsValid = TRUE;

    RTEMS_UNLOCK(OS_FDTableMutex);

    switch(access)
    {
        case OS_READ_ONLY:
            perm = O_RDONLY;
            break;
        case OS_WRITE_ONLY:
            perm = O_WRONLY;
            break;
        case OS_READ_WRITE:
            perm = O_RDWR;
            break;
        default:
            return OS_ERROR;
    }

    /* open the file with the R/W permissions */

    status =  open(local_path,perm);

    RTEMS_LOCK(OS_FDTableMutex);

    if (status != ERROR)
    {
        /* fill in the table before returning */
        OS_FDTable[PossibleFD].OSfd =       status;
        strncpy(OS_FDTable[PossibleFD].Path, path, OS_MAX_API_NAME);
        OS_FDTable[PossibleFD].User =       OS_TaskGetId();
        RTEMS_UNLOCK(OS_FDTableMutex);

        return PossibleFD;
    }
    else
    {
        /* Operation failed, so reset to false */
        OS_FDTable[PossibleFD].IsValid = FALSE;
        RTEMS_UNLOCK(OS_FDTableMutex);
        return OS_ERROR;
    }
#else
    UNUSED(path);
    UNUSED(access);
    UNUSED(mode);
    return OS_NOT_SUPPORTED;
#endif

} /* end OS_open */


/*--------------------------------------------------------------------------------------
Name: OS_close

Purpose: Closes a file. 

Returns: OS_ERROR if file  descriptor could not be closed
OS_ERR_FS_INVALID_FD if the file descriptor passed in is invalid
OS_SUCCESS if success
---------------------------------------------------------------------------------------*/

Result_T OS_close (int32_t  filedes)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;

    /* Make sure the file descriptor is legit before using it */
    if (filedes < 0 || filedes >= OS_MAX_NUM_OPEN_FILES || OS_FDTable[filedes].IsValid == FALSE)
    {
        return OS_ERR_FS_INVALID_FD;
    }
    else
    {    
        status = close ((int) OS_FDTable[filedes].OSfd);
        if (status == ERROR)
        {
            return OS_ERROR;
        }
        else
        {
            /* fill in the table before returning */
            RTEMS_LOCK(OS_FDTableMutex);
            OS_FDTable[filedes].OSfd =       -1;
            strcpy(OS_FDTable[filedes].Path, "\0");
            OS_FDTable[filedes].User =       0;
            OS_FDTable[filedes].IsValid =    FALSE;
            RTEMS_UNLOCK(OS_FDTableMutex);

            return OS_SUCCESS;
        }

    }
#else
    UNUSED(filedes);
    return OS_NOT_SUPPORTED;
#endif

}/* end OS_close */

/*--------------------------------------------------------------------------------------
Name: OS_read

Purpose: reads up to nbytes from a file, and puts them into buffer. 

Returns: OS_ERR_INVALID_POINTER if buffer is a null pointer
OS_ERROR if OS call failed
OS_ERR_FS_INVALID_FD if the file descriptor passed in is invalid
number of bytes read if success
---------------------------------------------------------------------------------------*/
Result_T OS_read  (int32_t  filedes, void *buffer, uint32_t nbytes)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int32_t status;

    if (buffer == NULL)
        return OS_ERR_INVALID_POINTER;

    /* Make sure the file descriptor is legit before using it */
    if (filedes < 0 || filedes >= OS_MAX_NUM_OPEN_FILES || OS_FDTable[filedes].IsValid == FALSE)
    {
        return OS_ERR_FS_INVALID_FD;
    }
    else
    { 
        status = read (OS_FDTable[filedes].OSfd, buffer, nbytes);

        if (status == ERROR)
            return OS_ERROR;
    }

    return status;
#else
    UNUSED(filedes);
    UNUSED(buffer);
    UNUSED(nbytes);
    return OS_NOT_SUPPORTED;
#endif

}/* end OS_read */

/*--------------------------------------------------------------------------------------
Name: OS_write

Purpose: writes to a file. copies up to a maximum of nbtyes of buffer to the file
described in filedes

Returns: OS_FS_INVALID_POINTER if buffer is NULL
OS_ERROR if OS call failed
OS_ERR_FS_INVALID_FD if the file descriptor passed in is invalid
number of bytes written if success
---------------------------------------------------------------------------------------*/

Result_T OS_write (int32_t  filedes, void *buffer, uint32_t nbytes)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int32_t status;

    if (buffer == NULL)
        return OS_ERR_INVALID_POINTER;

    /* Make sure the file descriptor is legit before using it */
    if (filedes < 0 || filedes >= OS_MAX_NUM_OPEN_FILES || OS_FDTable[filedes].IsValid == FALSE)
    {
        return OS_ERR_FS_INVALID_FD;
    }
    else
    {
        status = write(OS_FDTable[filedes].OSfd, buffer, nbytes );

        if (status != ERROR)
            return  status;
        else
            return OS_ERROR;
    }
#else
    UNUSED(filedes);
    UNUSED(buffer);
    UNUSED(nbytes);
    return OS_NOT_SUPPORTED;
#endif

}/* end OS_write */


/*--------------------------------------------------------------------------------------
Name: OS_chmod

Notes: This is not going to be implemented because there is no use for this function.
---------------------------------------------------------------------------------------*/

Result_T OS_chmod  (const char *path, uint32_t access)
{    
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    UNUSED(path);
    UNUSED(access);
    return OS_ERR_UNIMPLEMENTED;
#else
    UNUSED(path);
    UNUSED(access);
    return OS_ERR_NOT_SUPPORTED;
#endif
} /* end OS_chmod */

/*--------------------------------------------------------------------------------------
Name: OS_stat

Purpose: returns information about a file or directory in a os_fs_stat structure

Returns: OS_ERR_INVALID_POINTER if path or filestats is NULL
OS_ERR_FS_PATH_TOO_LONG if the path is too long to be stored locally
 *****        OS_ERR_FS_NAME_TOO_LONG if the name of the file is too long to be stored
 OS_ERR_FS_PATH_INVALID if path cannot be parsed
 OS_ERROR id the OS call failed
 OS_SUCCESS if success

Note: The information returned is in the structure pointed to by filestats         
---------------------------------------------------------------------------------------*/

Result_T OS_stat   (const char *path, os_fstat_t  *filestats)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int ret_val;
    char local_path[OS_MAX_PATH_LEN];

    if (path == NULL || filestats == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(path) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(local_path, path);
/*     if(OS_NameChange(local_path) != OS_SUCCESS)
 *     {
 *         return OS_ERR_FS_PATH_INVALID;
 *     }
 */


    /* check if the name of the file is too long */
    if (OS_check_name_length(local_path) == OS_ERROR)
        return OS_ERROR;

    ret_val = stat( (char*) local_path, filestats);
    if (ret_val == ERROR)
        return OS_ERROR;
    else
        return OS_SUCCESS;
#else
    UNUSED(path);
    UNUSED(filestats);
    return OS_NOT_SUPPORTED;
#endif

} /* end OS_stat */

/*--------------------------------------------------------------------------------------
Name: OS_lseek

Purpose: sets the read/write pointer to a specific offset in a specific file. 
Whence is either OS_SEEK_SET,OS_SEEK_CUR, or OS_SEEK_END

Returns: the new offset from the beginning of the file
OS_ERR_FS_INVALID_FD if the file descriptor passed in is invalid
OS_ERROR if OS call failed
---------------------------------------------------------------------------------------*/


Result_T OS_lseek  (int32_t  filedes, int32_t offset, uint32_t whence)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    off_t status;
    int where;

    /* Make sure the file descriptor is legit before using it */
    if (filedes < 0 || filedes >= OS_MAX_NUM_OPEN_FILES || OS_FDTable[filedes].IsValid == FALSE)
    {
        return OS_ERR_FS_INVALID_FD;
    }
    else
    {
        switch(whence)
        {
            case OS_SEEK_SET:
                where = SEEK_SET;
                break;
            case OS_SEEK_CUR:
                where = SEEK_CUR;
                break;
            case OS_SEEK_END:
                where = SEEK_END;
                break;
            default:
                return OS_ERROR;
        }


        status = lseek( OS_FDTable[filedes].OSfd, (off_t) offset, (int) where );

        if ( (int) status != ERROR)
            return (int32_t) status;
        else
            return OS_ERROR;
    }

#else
    UNUSED(offset);
    UNUSED(whence);
    UNUSED(filedes);
    return OS_NOT_SUPPORTED;
#endif
}/* end OS_lseek */

/*--------------------------------------------------------------------------------------
Name: OS_remove

Purpose: removes a given filename from the drive

Returns: OS_SUCCESS if the driver returns OK
OS_ERROR if there is no device or the driver returns error
OS_ERR_INVALID_POINTER if path is NULL
OS_ERR_FS_PATH_TOO_LONG if path is too long to be stored locally
OS_ERR_FS_PATH_INVALID if path cannot be parsed
OS_ERR_FS_NAME_TOO_LONG if the name of the file to remove is too long to be
stored locally
---------------------------------------------------------------------------------------*/

Result_T OS_remove (const char *path)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;
    char local_path[OS_MAX_PATH_LEN];

    if (path == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(path) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(local_path, path);
/*     if(OS_NameChange(local_path) != OS_SUCCESS)
 *     {
 *         return OS_ERR_FS_PATH_INVALID;
 *     }
 */


    /* check if the name of the file is too long */
    if (OS_check_name_length(local_path) == OS_ERROR)
        return OS_ERR_FS_NAME_TOO_LONG;

    status = remove (local_path);
    if (status != ERROR)
        return OS_SUCCESS;
    else
        return OS_ERROR;

#else
    UNUSED(path);
    return OS_NOT_SUPPORTED;
#endif
} /* end OS_remove */

/*--------------------------------------------------------------------------------------
Name: OS_rename

Purpose: renames a file

Returns: OS_SUCCESS if the rename works
OS_ERROR if the file could not be opened or renamed.
OS_FS_INVALID_POINTER if old or new are NULL
OS_ERR_FS_PATH_INVALID if path cannot be parsed
OS_ERR_FS_PATH_TOO_LONG if the paths given are too long to be stored locally
OS_ERR_FS_NAME_TOO_LONG if the new name is too long to be stored locally
---------------------------------------------------------------------------------------*/

Result_T OS_rename (const char *old, const char *new)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;
    char old_path[OS_MAX_PATH_LEN];
    char new_path[OS_MAX_PATH_LEN];

    if (old == NULL || new == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(old) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    if (strlen(new) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(old_path, old);
    strcpy(new_path, new);
    if(OS_NameChange(old_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }
    if(OS_NameChange(new_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }


    status = rename (old_path, new_path);
    if (status != ERROR)
        return OS_SUCCESS;
    else
        return OS_ERROR;

#else
    UNUSED(old);
    UNUSED(new);
    return OS_NOT_SUPPORTED;
#endif
}/*end OS_rename */

/*--------------------------------------------------------------------------------------
Name: OS_cp

Purpose: Copies a single file from src to dest

Returns: OS_SUCCESS if the operation worked
OS_ERROR if the file could not be accessed
OS_FS_INVALID_POINTER if src or dest are NULL
OS_ERR_FS_PATH_INVALID if path cannot be parsed
OS_ERR_FS_PATH_TOO_LONG if the paths given are too long to be stored locally
OS_ERR_FS_NAME_TOO_LONG if the dest name is too long to be stored locally

---------------------------------------------------------------------------------------*/

Result_T OS_cp (const char *src, const char *dest)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;
    char src_path[OS_MAX_PATH_LEN];
    char dest_path[OS_MAX_PATH_LEN];

    /* leavenough space for the two paths and the command */
    char command [OS_MAX_PATH_LEN * 2 + 5];

    if (src == NULL || dest == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(src) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    if (strlen(dest) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(src_path, src);
    strcpy(dest_path, dest);
    if(OS_NameChange(src_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }
    if(OS_NameChange(dest_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }

    sprintf(command,"cp %s %s",src_path, dest_path);

    status = system(command);
    if (status != ERROR)
        return OS_SUCCESS;
    else
        return OS_ERROR;

#else
    UNUSED(src);
    UNUSED(dest);
    return OS_NOT_SUPPORTED;
#endif
}/*end OS_cp */

/*--------------------------------------------------------------------------------------
Name: OS_mv

Purpose: moves a single file from src to dest

Returns: OS_SUCCESS if the operation worked
OS_ERROR if the file could not be accessed
OS_FS_INVALID_POINTER if src or dest are NULL
OS_ERR_FS_PATH_INVALID if path cannot be parsed
OS_ERR_FS_PATH_TOO_LONG if the paths given are too long to be stored locally
OS_ERR_FS_NAME_TOO_LONG if the dest name is too long to be stored locally

---------------------------------------------------------------------------------------*/

Result_T OS_mv (const char *src, const char *dest)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;
    char src_path[OS_MAX_PATH_LEN];
    char dest_path[OS_MAX_PATH_LEN];

    /* leavenough space for the two paths and the command */
    char command [OS_MAX_PATH_LEN * 2 + 5];

    if (src == NULL || dest == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(src) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    if (strlen(dest) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(src_path, src);
    strcpy(dest_path, dest);
    if(OS_NameChange(src_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }
    if(OS_NameChange(dest_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }

    sprintf(command,"mv %s %s",src_path, dest_path);

    status = system(command);
    if (status != ERROR)
        return OS_SUCCESS;
    else
        return OS_ERROR;

#else
    UNUSED(src);
    UNUSED(dest);
    return OS_NOT_SUPPORTED;
#endif
}/*end OS_mv */

/*
 ** Directory API 
 */
/*--------------------------------------------------------------------------------------
Name: OS_mkdir

Purpose: makes a directory specified by path.

Returns: OS_ERR_INVALID_POINTER if path is NULL
OS_ERR_FS_PATH_TOO_LONG if the path is too long to be stored locally
OS_ERR_FS_PATH_INVALID if path cannot be parsed
OS_ERROR if the OS call fails
OS_SUCCESS if success

Note: The access parameter is currently unused.
---------------------------------------------------------------------------------------*/

Result_T OS_mkdir (const char *path, uint32_t access)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    UNUSED(access);
    int status;
    mode_t mode;
    char local_path[OS_MAX_PATH_LEN];

    if (path == NULL)
        return OS_ERR_INVALID_POINTER;


    if (strlen(path) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    /* make a local copy of the path */
    strcpy(local_path, path);
    if(OS_NameChange(local_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }

    mode = S_IFDIR |S_IRWXU | S_IRWXG | S_IRWXO;
    status = mkdir(local_path, mode);

    if (status != ERROR)
        return OS_SUCCESS;
    else
        return OS_ERROR;

#else
    UNUSED(path);
    UNUSED(access);
    return OS_NOT_SUPPORTED;
#endif
}/* end OS_mkdir */

/*--------------------------------------------------------------------------------------
Name: OS_opendir

Purpose: opens a directory for searching

Returns: NULL if path is NULL,path is too long, OS call fails
a pointer to a directory if success
OS_ERR_FS_PATH_INVALID if path cannot be parsed

---------------------------------------------------------------------------------------*/


os_dirp_t OS_opendir (const char *path)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)

    os_dirp_t dirdescptr;
    char local_path[OS_MAX_PATH_LEN];

    if (path == NULL)
        return NULL;

    if (strlen(path) > OS_MAX_PATH_LEN)
        return NULL;

    /* make a local copy of the path */
    strcpy(local_path, path);
    if(OS_NameChange(local_path) != OS_SUCCESS)
    {
        return NULL;
    }


    dirdescptr = opendir( (char*) local_path);

    if (dirdescptr == NULL)
        return NULL;
    else
        return dirdescptr;

#else
    UNUSED(path);
    return NULL;
#endif
} /* end OS_opendir */

/*--------------------------------------------------------------------------------------
Name: OS_closedir

Purpose: closes a directory

Returns: OS_SUCCESS if success
OS_ERROR if close failed
---------------------------------------------------------------------------------------*/

Result_T OS_closedir (os_dirp_t directory)
{ 
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;

    if (directory == NULL)
        return OS_ERR_INVALID_POINTER;

    status = closedir(directory);
    if (status != ERROR)
        return OS_SUCCESS;
    else
        return OS_ERROR;

#else
    UNUSED(directory);
    return OS_NOT_SUPPORTED;
#endif
} /* end OS_closedir */

/*--------------------------------------------------------------------------------------
Name: OS_readdir

Purpose: obtains directory entry data for the next file from an open directory

Returns: a pointer to the next entry for success
NULL if error or end of directory is reached
---------------------------------------------------------------------------------------*/


os_dirent_t *  OS_readdir (os_dirp_t directory)
{ 
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    os_dirent_t *tempptr;

    if (directory == NULL)
        return NULL;

    tempptr = readdir( directory);

    if (tempptr != NULL)
        return tempptr;

    else
        return NULL; 


    /* should never reach this point in the code */
    return NULL;

#else
    UNUSED(directory);
    return NULL;
#endif
} /* end OS_readdir */


/*--------------------------------------------------------------------------------------
Name: OS_rmdir

Purpose: removes a directory from  the structure (must be an empty directory)

Returns: OS_ERR_INVALID_POINTER if path is NULL
OS_ERR_FS_PATH_INVALID if path cannot be parsed    
OS_FS_ER_PATH_TOO_LONG
---------------------------------------------------------------------------------------*/


int32_t  OS_rmdir (const char *path)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    int status;
    char local_path [OS_MAX_PATH_LEN];

    if (path == NULL)
        return OS_ERR_INVALID_POINTER;

    if (strlen(path) >= OS_MAX_PATH_LEN)
        return OS_ERR_FS_PATH_TOO_LONG;

    strcpy(local_path,path);
    if(OS_NameChange(local_path) != OS_SUCCESS)
    {
        return OS_ERR_FS_PATH_INVALID;
    }

    status = rmdir(local_path);

    if (status != ERROR)
        return OS_SUCCESS;
    else
        return OS_ERROR;

#else
    UNUSED(path);
    return OS_NOT_SUPPORTED;
#endif
}/* end OS_rmdir */

/* --------------------------------------------------------------------------------------
Name: OS_check_path_length

Purpose: Checks the length of the file name at the end of the path.

Returns: OS_ERROR if path is NULL, path is too long, there is no '/' in the path
name, the name is too long
OS_SUCCESS if success

NOTE: This is only an internal function and is not intended for use by the user
---------------------------------------------------------------------------------------*/

LOCAL Result_T OS_check_name_length(const char *path)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    char* name_ptr;
    char* end_of_path;
    int name_len;

    if (path == NULL)
        return OS_ERR_INVALID_POINTER;


    if (strlen(path) > OS_MAX_PATH_LEN)
        return OS_ERROR;
    /* checks to see if there is a '/' somewhere in the path */
    name_ptr = strrchr(path, '/');
    if (name_ptr == NULL)
        return OS_ERROR;

    /* strrchr returns a pointer to the last '/' char, so we advance one char */
    name_ptr = name_ptr + sizeof(char);

    /* end_of_path points to the null terminator at the end of the path */
    end_of_path = strrchr(path,'\0');

    /* pointer subraction to see how many characters there are in the name */
    name_len = ((int) end_of_path - (int)name_ptr) / sizeof(char);

    if( name_len > OS_MAX_FILE_NAME)
        return OS_ERROR;

    return OS_SUCCESS;

#else
    UNUSED(path);
    return OS_NOT_SUPPORTED;
#endif
}/* end OS_check_path_length */

/* --------------------------------------------------------------------------------------
Name: OS_FDGetInfo

Purpose: Copies the information of the given file descriptor into a structure passed in

Returns: OS_ERR_FS_INVALID_FD if the file descriptor passed in is invalid
OS_SUCCESS if the copying was successfull
---------------------------------------------------------------------------------------*/

Result_T OS_FDGetInfo (int32_t filedes, OS_FDTableEntry *fd_prop)
{
#if defined(CONFIG_OS_ENABLE_FILESYSTEM)
    /* Make sure the file descriptor is legit before using it */
    if (filedes < 0 || filedes >= OS_MAX_NUM_OPEN_FILES || OS_FDTable[filedes].IsValid == FALSE)
    {
        /* Makse sure user knows this is nota valid descriptor if he forgets to check the
         * return code */
        (*(fd_prop)).IsValid = FALSE;
        return OS_ERR_FS_INVALID_FD;
    }
    else
    { 
        *fd_prop = OS_FDTable[filedes];
        return OS_SUCCESS;
    }

#else
    UNUSED(fd_prop);
    UNUSED(filedes);
    return OS_NOT_SUPPORTED;
#endif
}/* end OS_FDGetInfo */

